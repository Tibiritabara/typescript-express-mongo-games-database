# generated by datamodel-codegen:
#   filename:  main.yaml
#   timestamp: 2023-05-14T12:35:56+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Field, conint


class Game(BaseModel):
    title: str = Field(..., description='Game title')
    numberOfLikes: Optional[int] = Field(
        None, description='Number of likes for the game'
    )
    numberOfPlayers: Optional[int] = Field(
        None, description='Number of players for the game'
    )
    rank: Optional[float] = Field(None, description='Rank of the game')
    createdAt: Optional[datetime] = Field(
        None, description='Date and time when the game was created'
    )
    updatedAt: Optional[datetime] = Field(
        None, description='Date and time when the game was updated'
    )


class ObjectType(Enum):
    games = 'games'
    trends = 'trends'


class ObjectId(BaseModel):
    __root__: str = Field(..., description='The id of an object')


class ObjectAttributes(BaseModel):
    __root__: Game = Field(..., description='The attributes of an object')


class Links(BaseModel):
    current: Optional[str] = Field(None, description='The current page of the results')
    first: Optional[str] = Field(None, description='The first page of the results')
    prev: Optional[str] = Field(None, description='The previous page of the results')
    next: Optional[str] = Field(None, description='The next page of the results')
    last: Optional[str] = Field(None, description='The last page of the results')


class Meta(BaseModel):
    status: Optional[str] = Field(
        None, description='additional status information relevant to the operation'
    )
    count: Optional[float] = Field(None, description='The number of results')


class SingleObjectBody(BaseModel):
    attributes: Optional[Game] = None


class Op(Enum):
    add = 'add'
    remove = 'remove'
    replace = 'replace'
    move = 'move'
    copy = 'copy'
    test = 'test'
    inc = 'inc'


class JsonPatchOperation(BaseModel):
    op: Op
    value: Optional[Any] = Field(
        None, description='The value to be changed/modified by the operation'
    )
    from_: Optional[str] = Field(
        None,
        alias='from',
        description='JSON Pointer, indicating the object attribute to be sourced for modification',
    )
    path: str = Field(
        ..., description='JSON pointer towards the target update location'
    )
    inc: Optional[float] = Field(
        None, description='The value to be incremented by the operation'
    )


class JsonPatch(BaseModel):
    __root__: List[JsonPatchOperation] = Field(
        ...,
        description='RFC6902 [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902)',
    )


class SingleObjectData(BaseModel):
    type: Optional[ObjectType] = None
    id: Optional[ObjectId] = None
    attributes: Optional[ObjectAttributes] = None


class MultipleObjectsResponse(BaseModel):
    data: List[SingleObjectData]
    links: Optional[Links] = None
    meta: Optional[Meta] = None


class ErrorPointer(BaseModel):
    pointer: Optional[str] = Field(
        None,
        description='A JSON pointer following RFC6901 to the value on the request document that caused the error',
    )


class ErrorParameter(BaseModel):
    parameter: Optional[str] = Field(
        None, description='The name of the URI parameter that caused the error'
    )


class ErrorDetails(BaseModel):
    title: str = Field(..., description='The title of the error')
    detail: Optional[str] = Field(None, description='The details of the error')
    source: Optional[Union[ErrorPointer, ErrorParameter]] = None


class ErrorResponse(BaseModel):
    code: Optional[conint(ge=100, le=600)] = Field(
        None, description='The error code', example=400
    )
    errors: Optional[List[ErrorDetails]] = None


class SingleObjectRequest(BaseModel):
    data: Optional[SingleObjectBody] = None


class SingleObjectResponse(BaseModel):
    data: Optional[SingleObjectData] = None
    meta: Optional[Meta] = None
